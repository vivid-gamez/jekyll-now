---
layout: post
title: 포인터
---
<h3> 포인터란 </h3>

포인터는 가리킨다는 의미이다. 그렇다면 포인터 변수는 무엇을 가르키는 것일까.

포인터는 간접 참조 연산자 *로 나타내며, a가 b를 나타내고 있다면 a → b로 표현할 수 있다.<br>
또한, a는 포인터이고 b의 주소(특히 시작주소)를 저장한다는 의미이다.

포인터 변수의 선언은 
int *pa;<br>
pa = &a<br>
*pa = 10;

혹은

*pa = &a;<br>
*pa = 10;

와 같이 선언과 동시에 초기화한다.<br>
<b>주소</b>라는 것은 뭘까? 주소는 메모리 어딘가 변수라는 세입자를 보관하는 방이라고 생각하면 된다.

예시로, int형 변수, double형 변수의 경우, 4B와 8B의 공간을 차지하는 방에 저장할 것이다.

위에서 선언한 *pa = 10은 전자의 선언을 보면 pa에 주소가 들어있기 때문에, pa의 주소를 찾아간다.<br>
주소에 찾아가서 직접 세입자가 있는 방에서 다른 세입자로 바꿔준다.<br>

따라서 메모리 주소를 참조하여 직접 a의 값을 10으로 만들어 줄 것이다.<br>
심지어는, 변수의 이름으로 출력한 값과 같은 값을 나타내며 변경가능하기 때문에<br>
<b>이를 a와 동일하게 봐도 무방하다.<b>

그런데, 이것이 필요한 <b>이유</b>는 무엇일까?

그것은 바로 함수 내부에서 선언한 변수는 그 블록 안에서만 사용가능하기 때문이다.<br>

두 값을 바꾸는 함수를 구현했다 가정하고 이를 void a(int i, int j)라고 하자.<br>
메인함수에 정수 i, j 를 선언해서 void a(i, j)를 해봤자, 함수 내부에서만 i와 j를 바꿀 뿐이다.<br>
<b>메인함수의 i와 j는 블록 내부에서만 사용가능하기에 함수를 호출해도 값은 그대로이다.</b>
<pr>다음으로 const 예약어를 이용한 포인터 상수이다.<br>
const의 경우 원래 저장된 변수를 다른 값으로 바꾸지 못하도록 상수화 시키는데,<br>
포인터 변수의 경우 어떻게 활용할까?

바로 포인터로 간접참조하여 pa를 통해 값을 바꾸지 못하도록 하는 역할을 한다.<br>
문자열 상수를 인수로 받을 경우, 그 저장공간이 값이 바뀌면 안된다.</pr><br>
(아마도)문자열 "abc"가 저장된 장소에 가서 a를 b로 직접 바꿔달라고 하는 것은 상수이므로 불가능하다는 것이다.<br>
자세한 이야기는 문자열과 포인터의 관계 포스팅에서 다루도록 하겠다.

다음으로, 포인터를 활용한 함수에 대하여 설명할 것이다.

<h3>포인터를 활용한 함수 </h3>

오늘 진짜 적고싶었던 부분은 이 프로그램을 위해서이다.

바로! 혼공C 책에 나오는 미니 정렬 프로그램의 예제이다.<br>
세개의 실수를 입력 받아, 가장 큰 수대로 정렬하는 프로그램이다.<br>
주어진 swap()함수를 이용해 정렬 함수를 만들어보라는 내용이다.






배열 포스팅 끝!


